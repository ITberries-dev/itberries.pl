{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Client } from '../prismic';\n\nvar Index = function Index(props) {\n  return __jsx(\"div\", null, console.log(\"ElOs\"), \"index.html\");\n};\n\n_c = Index;\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var req, res, query, pathname, home, pageURL, error;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            req = _ref.req, res = _ref.res, query = _ref.query, pathname = _ref.pathname;\n            console.log(\"ELO\");\n            _context.prev = 2;\n            _context.next = 5;\n            return Client(req).getSingle('homepage', {\n              lang: query.language\n            });\n\n          case 5:\n            home = _context.sent;\n            pageURL = req ? req.protocol + '://' + req.headers.host + req.url : window.location.origin + pathname;\n\n            if (home) {\n              _context.next = 11;\n              break;\n            }\n\n            res.statusCode = 404;\n            error = {\n              statusCode: 404\n            };\n            return _context.abrupt(\"return\", {\n              error: error\n            });\n\n          case 11:\n            console.log(home);\n            return _context.abrupt(\"return\", {\n              home: home,\n              pageURL: pageURL\n            });\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](2);\n            return _context.abrupt(\"return\", {\n              error: true\n            });\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 15]]);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/matthew/Documents/ITBERRIES/src/pages/index.tsx"],"names":["React","Client","Index","props","console","log","getInitialProps","req","res","query","pathname","getSingle","lang","language","home","pageURL","protocol","headers","host","url","window","location","origin","statusCode","error"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,MAAT,QAAuB,YAAvB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAgB;AAC1B,SACI,mBACKC,OAAO,CAACC,GAAR,CAAY,MAAZ,CADL,eADJ;AAMH,CAPD;;KAAMH,K;;AASNA,KAAK,CAACI,eAAN;AAAA,uEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,GAAT,QAASA,GAAT,EAAcC,GAAd,QAAcA,GAAd,EAAmBC,KAAnB,QAAmBA,KAAnB,EAA0BC,QAA1B,QAA0BA,QAA1B;AACpBN,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AADoB;AAAA;AAAA,mBAGGJ,MAAM,CAACM,GAAD,CAAN,CAAYI,SAAZ,CAAsB,UAAtB,EAAkC;AAAEC,cAAAA,IAAI,EAAEH,KAAK,CAACI;AAAd,aAAlC,CAHH;;AAAA;AAGVC,YAAAA,IAHU;AAKVC,YAAAA,OALU,GAKAR,GAAG,GAAGA,GAAG,CAACS,QAAJ,GAAe,KAAf,GAAuBT,GAAG,CAACU,OAAJ,CAAYC,IAAnC,GAA0CX,GAAG,CAACY,GAAjD,GAAuDC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAyBZ,QALnF;;AAAA,gBAOXI,IAPW;AAAA;AAAA;AAAA;;AAQZN,YAAAA,GAAG,CAACe,UAAJ,GAAiB,GAAjB;AAEMC,YAAAA,KAVM,GAUE;AACVD,cAAAA,UAAU,EAAE;AADF,aAVF;AAAA,6CAcL;AAAEC,cAAAA,KAAK,EAALA;AAAF,aAdK;;AAAA;AAiBhBpB,YAAAA,OAAO,CAACC,GAAR,CAAYS,IAAZ;AAjBgB,6CAmBT;AAAEA,cAAAA,IAAI,EAAJA,IAAF;AAAQC,cAAAA,OAAO,EAAPA;AAAR,aAnBS;;AAAA;AAAA;AAAA;AAAA,6CAqBT;AAAES,cAAAA,KAAK,EAAE;AAAT,aArBS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAyBA,eAAetB,KAAf","sourcesContent":["import React from 'react';\nimport { IncomingMessage } from 'http';\nimport { Client } from '../prismic';\n\nconst Index = (props: any) => {\n    return (\n        <div>\n            {console.log(\"ElOs\")}\n            index.html\n        </div>\n    )\n};\n\nIndex.getInitialProps = async ({ req, res, query, pathname }: { req: IncomingMessage, res: any, query: any, pathname: string })  => {\n    console.log(\"ELO\")\n    try {\n        const home = await Client(req).getSingle('homepage', { lang: query.language });\n\n        const pageURL = req ? req.protocol + '://' + req.headers.host + req.url : window.location.origin + pathname;\n\n        if (!home) {\n            res.statusCode = 404;\n\n            const error = {\n                statusCode: 404\n            };\n\n            return { error }\n        }\n\n        console.log(home)\n\n        return { home, pageURL };\n    } catch (error) {\n        return { error: true };\n    }\n}\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}